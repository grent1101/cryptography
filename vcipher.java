import java.util.Scanner;
import java.io.File;

public class vcipher {
  public static void main(String[] args){
    double freq[] = new double[] {.082, .015, .028, .043, .127, .022, .02, .061, .07, .002, .08, .04, .024, .067, .015, .019, .001, .06, .063, .091, .028, .01, .024, .002, .02, .001};

    Scanner sc = new Scanner(System.in);

    int keyLength = 2;
    String str = "F36BB1C136A853C93FFDDB38A81EC96AF2DA73AC1EDC7AF4DE7EAA51D57BBD923EA25ADF6DFF923AA95BDB25B1F33FA151CD3FF4C436BF47D571F4923AA31EDB3FF2DD3EBD5FD466B1C63CED55D470E69224A55FCE3FF4C436BF47D571F49236A14DDF3FF8DC73B956DF3FF2DD3EBD5FD466B1DB20ED4EDB76F59C739E4BD977B1C232B41ECE6DF0DC20BD5FC87AFFD12AED56DB6CB1DF32A3479A6FE3DD23A250DF71E5C17FED49D270B1D321AA4BDF3FE5DA32B91ED36BB1D132A31ED27AFDC273A051CE76E7D327A81EDF72E1DE3CB45BDF6CBD9230A151C97AB1C63BA81EDD7AFFD636BF1ECA7EE89234AC4E963FF0DC37ED5FCE6BE3D330B91ED47AE69227AC52DF71E59231B41ECA6DFEC43AA957D478B1D373AE52DF7EE39223A45DCE6AE3D773A2589A77FEC573AC5DD276F4C436A05BD46BB1DB3DED4AD27AB1D13CA04EDB71E8923ABE1EC87AE6D321A95BDE31B1F026B91ED36BB1D132A31EDB73E2DD73A55FCC7AB1C63BA81ED56FE1DD20A44ADF3FF4D435A85DCE33B1D636A051C87EFDDB29A450DD3FF4DF23A151C37AF4C173AC50DE3FF5C03ABB57D478B1C432A14BDB7DFDD773B95FD67AFFC673AC49DB66BD9236BE4EDF7CF8D33FA1479A68F9D73DED57CE3FF8C13DEA4A9A7CFDD732BF1ECD77E89220A253DF3FE1D73CBD52DF3FF0C036ED4EDB76F5923EA24CDF3FE5DA32A31ED56BF9D721BE109A4CFE9235A24C9A70E3D532A357C07EE5DB3CA34D9A7CFEDC20A45ADF6DF8DC34ED49D27AE3D773B9519A78FE9224A44AD23FE1D32AED4AC87EFFC123AC4CDF71F2CB7FED57CE38E2923AA04ED56DE5D33DB91ECE70B1C73DA95BC86CE5D33DA91ECD77E89227A24ADB73B1C621AC50C96FF0C036A35DC33FE6DD21A64D9A76FF9220A253DF3FE2DB27B85FCE76FEDC20E013DB71F59230AC509A7DF49232ED5AD36CF0C127A84C9A76FF923CB956DF6DE29C73815BCE38E29237A44DCA7AFFC136ED49D36BF99224A55FCE3FD89230A250C976F5D721ED4AD27AB1D732BE479A7BF4D13ABE57D571E29235A44CC96BBF9215A24C9A6CE5D321B95BC86CBD9239B84DCE3FF0D03CB84A9A7AE7D721B41ED56DF6D33DA444DB6BF8DD3DED5DDB71B1D036A35BDC76E59235BF51D73FE2DD3EA81EDD6DF4D327A84C9A73F4C436A11ED579B1C232B41ECE6DF0DC20BD5FC87AFFD12AE31EFC70E3923AA34DCE7EFFD136E11ED379B1D33DED51C878F0DC3AB75FCE76FEDC73A55FC93FF7DD21A05FD63FE1C03CA557D876E5DB3CA34D9A70FF9236A04ED670E8D736BE1EC977F0C03AA3599A6CF0DE32BF479A76FFD43CBF53DB6BF8DD3DED49D36BF99227A55BD36DB1C236A84CC933B1DB27EA4D9A6FE3DD31AC5CD666B1C63AA05B9A6BFE9237A44DD97EE3D673B956DF72BF921EAC50C33FF4DF23A151C37AF4C173AC50DE3FE1DD27A850CE76F0DE73A853CA73FECB36A84D9A79F8DC37ED4DCF7CF99223BF51D276F3DB27A451D46CB1C73DBF5BDB6CFEDC32AF52DF33B1C13CED4AD276E2923ABE1ED470B1C532B41ECE70B1D026A452DE3FF0DC73A858DC7AF2C63ABB5B963FFCDD27A448DB6BF4D673BA51C874F7DD21AE5B943FD0DC37ED4AD27AB1DE36AA5FD63FF3D320A44D9A79FEC073BE4BD977B1C026A15BC93FF8C173AC4A9A7DF4C127ED53CF6DFACB7EE057D47BF4D737E11EDB3FFDD321AA5B9A71E4DF31A84C9A70F79206E36D943FE2C632B95BC93FFFDD24ED5BC26FFDDB30A44AD666B1D032A31ECE77F4DF7DED6AD27AB1DC36B54A9A6CE5D723ED57D43FE5C032A34DCA7EE3D73DAE479A76E29232AE4AD369F4DE2AED5AD36CF2DE3CBE57D478B1C63BA81ECA6DFED136BE4DDF6CB1DD21ED58D56DFCC73FAC4D9A6AE2D737ED4AD53FE2D727ED4EDB66B1D43CBF1EDB73FD923FA848DF73E2923CAB1ECE77F4923CBF59DB71F8C832B957D571BF9207A55BC87AB1DB20ED50D53FF2DE36AC4C9A7BFEC53DBE57DE7AB1C63CED4AD276E29C738B51C83FF09223AC479A6CE8C127A8539A6BFE9231A81EDB71B1D735AB5BD96BF8C436ED53D56BF8C432B957D571F0DE73B951D573BD923AB91ED27EE29227A21ED67EE8923CB84A9A7EB1D13FA85FC83FE1D327A51EDC70E39236A04ED670E8D736BE1ECE70B1D732BF509A72FEC036ED5CC33FF8DF23BF51CC76FFD573B956DF76E39223A84CDC70E3DF32A35DDF31B1F026B91ECD77F0C673AC5CD56AE59227A55B9A79F8DC32A11EC96BF4C27EE05AD36CF2DE3CBE57D478B1D725A84CC370FFD774BE1EDB7CE5C732A11ED67AE7D73FED51DC3FF2DD3EBD5BD46CF0C63AA2509A6BFE9232A1529A7AFCC23FA247DF7AE28D739956DF3FF2DA3CA45DDF3FF9D721A81ED36CB1DF3CBF5B9A7CFEDF23A157D97EE5D737E31EFC6AFDDE73BD5FC33FE5C032A34DCA7EE3D73DAE479A68FEC038BE1ECD7AFDDE73A4509A6BE6DD73BE5BCE6BF8DC34BE109A50FFD773A44D9A68F9D721A81ECA7EE8923FA848DF73E29232BF5B9A7DF0C136A91EC976FCC23FB41ED571B1C032A3559A7EFFD673B95BD46AE3D77FED5FD47BB1C236BF56DB6FE2923FA25DDB6BF8DD3DE013D470E5923CA31ECA7AE3D43CBF53DB71F2D77DED6AD276FFD973AA51CC7AE3DC3EA850CE3FF0D536A35DD37AE29C7382509A6BF9D773BD5FC33FE2D132A15B9A79FEC073AE57CC76FDDB32A31EDF72E1DE3CB45BDF6CB1DD35ED4AD27AB1D436A95BC87EFD9234A248DF6DFFDF36A34A963FF4C436BF47D571F49230AC509A7AF0C13AA1479A79F8DC37ED51CF6BB1C53BAC4A9A6CFEDF36A250DF3FF8DC73AC1ED070F39232B91ECE77F492149E138D3FFDD725A8529A68F8C63BED4AD26DF4D773B45BDB6DE2923CAB1EDF67E1D721A45BD47CF49220A551CF73F59236AC4CD43FF8DC73AC1EDD76E7D73DED52D57CF0DE36E31EEE77F8C173A15BCE6CB1D725A84CC370FFD773A650D568B1D72BAC5DCE73E89224A55FCE3FE5DA36B41ED27EE7D773B9519A7BFE9227A21EDF7EE3DC73A051C87ABD9232A35A9A6BF9D721A81ED36CB1DC3CED4CDF7EE2DD3DED58D56DB1D33DB451D47AB1C63CED58DF7AFD9230A55BDB6BF4D673AF5BD97EE4C136ED4DD572F4DD3DA81EDF73E2D773A44D9A7DF4DB3DAA1ECA7EF8D673A051C87AB1D43CBF1EDE70F8DC34ED4AD27AB1C132A05B9A75FED07DED78CF73FD9227BF5FD46CE1D321A850D966B1D33FBE519A7EE1C236AC4CC93FE5DD73BA51C874B1C536A1529A68F9D73DED5BCC7AE3CB3CA35B9A76FF9227A55B9A70E3D532A357C07EE5DB3CA31ED97EFF9220A85B9A77FEC573A848DF6DE8DD3DA81EDF73E2D773A44D9A6FF4C035A24CD776FFD57FED5BC96FF4D13AAC52D666B1C53BA8509A6FF4C035A24CD77EFFD136ED5DDB71B1D732BE57D666B1D036ED53DF7EE2C721A85A9A70F3D836AE4AD369F4DE2AE013DC70E3923AA34DCE7EFFD136E11EDB3FE2D33FA84D9A70E3D532A357C07EE5DB3CA31ECE77F0C673B94CDB7CFAC173A450DE76E7DB37B85FD63FE2D33FA84D9A6FF4C035A24CD77EFFD136ED58D56DB1D33FA11ECE70B1C136A8109A57F4C036ED4EDB66B1D132A31ED87AB1D032BE5BDE3FFEDC73BD5BC879FEC03EAC50D97ABD9232A35A9A6BF9D773AB5FD36DFFD720BE1ED579B1C232B41EDE76F7D436BF5BD46BF8D33FBE1EC977FEC73FA91ED87AB1D13FA85FC83FE5DD73AC52D631B1F33DA24AD27AE39236B55FD76FFDD773A44D9A6CFCD33FA11EC96BF0C027B84E9A79F8C03EBE1ECD77F4C036ED5FD673B1D73EBD52D566F4D720ED5FC87AB1D432A057D676F0C073BA57CE77B1D732AE569A70E5DA36BF1EDB71F59237A44CDF7CE5DE2AED51D86CF4C025A81EDF7EF2DA73A24AD27AE39520ED4EDF6DF7DD21A05FD47CF49C73844A9A72F0CB73AF5B9A7BF8D435A45DCF73E59227A21ED77AF0C126BF5B9A6FF4C035A24CD77EFFD136ED51D875F4D127A448DF73E8923AA31ECE77F4C136ED5DD572E1D33DA45BC933B1D026B91EDB6BB1DE36AC4DCE3FF8C674BE1EC87AF0C13CA35FD873E89232BD4EDB6DF4DC27ED4AD53FF0DE3FED49D27EE59236BB5BC866FEDC36ED57C93FF5DD3AA3599A6BFE9236AC4CD43FE5DA36A44C9A6FF0CB7DED73D569F4923CB84AC976F5D773B956D56CF49227BA519A6BE8C236BE1ED579B1DD21AA5FD476EBD327A451D46CBD923BA249DF69F4C07FED5FD47BB1D426A1529A6BE3D33DBE4EDB6DF4DC30B41ED87AF2DD3EA84D9A7EB1DE3CB91ECE6DF8D138A45BC831B1E53BAC4A9A76F79232ED5DD572E1D33DB41ECD7EFFC620ED4AD53FE3D724AC4CDE3FF8DC37A448D37BE4D33FED4EDF6DF7DD21A05FD47CF49E73AF4BCE3FF8DC37A448D37BE4D33FED5DD571E5C03AAF4BCE76FEDC20ED5FC87AB1DC36A44AD27AE39225A44DD37DFDD773B9519A7AE7D721B451D47AB1DB3DED4AD27AB1D13CA04EDB71E8923DA24C9A7AF0C12AED4AD53FFCD732BE4BC87AB1DB3DED5F9A79E4DE3FB41ED57DFBD730B957CC7AB1C532B4019A48F9D327ED57DC3FF0DC73A24CDD7EFFDB29AC4AD370FF923ABE1EC87AFDD327A448DF73E8923FAC4CDD7AB1D33DA91ECE77F49224A24CD13FF8C173A557DD77FDCB73AE51D673F0D03CBF5FCE76E7D77FED53DB74F8DC34ED57CE3FF8DF23A24DC976F3DE36ED58D56DB1D725A84CC370FFD773B9519A7DF49232BA5FC87AB1DD35ED5FD673B1C63BA857C83FF2DD7EBA51C874F4C020EA1ED970FFC621A45CCF6BF8DD3DBE1EDB71F59237A458DC76F2C73FB91EDC70E39236BB5BC866FEDC36ED4AD53FF0D521A85B9A70FF923BA2499A6BF9DD20A81ED970FFC621A45CCF6BF8DD3DBE1EC977FEC73FA91ED87AB1C432A14BDF7BAE921AA31ECE77F4C136ED4DDF6BE5DB3DAA4D963FF7C73FA11ECA7EE89227BF5FD46CE1D321A850D966B1D132A31EDE70B1DF3CBF5B9A77F0C03EED4AD27EFF9234A251DE31B1F72BAE5BCA6BF4D673AB4CD572B1D33DED5FC86BF8D13FA81ED866B1E63CA95A9A45F4DC34A84C9A6FE4D03FA44DD27AF5923AA31ECE77F49204AC52D63FC2C621A85BCE3FDBDD26BF50DB73B1DD3DA157D47AB1D737A44AD370FF923CA31EFB6AF6C720B91E8B2CBD9261FD0F8D31B1F13CBD47C876F6DA27ED0C8A2EA99217A2499A55FEDC36BE1E9C3FD2DD3EBD5FD466BD921AA35D943FD0DE3FED6CD378F9C620ED6CDF6CF4C025A85A94";
    int i, j, k;

    double arr[] = new double[(36 * keyLength)];
    for (i = 0; i < keyLength; i++) {
      for(j = i; j < str.length(); j += keyLength){
        char c = str.charAt(j);
        if(c == 'a' || c == 'A'){
          arr[0 + (36 * i)]++;
        } else
        if(c == 'b' || c == 'B'){
          arr[1 + (36 * i)]++;
        } else
        if(c == 'c' || c == 'C'){
          arr[2 + (36 * i)]++;
        } else
        if(c == 'd' || c == 'D'){
          arr[3 + (36 * i)]++;
        } else
        if(c == 'e' || c == 'E'){
          arr[4 + (36 * i)]++;
        } else
        if(c == 'f' || c == 'F'){
          arr[5 + (36 * i)]++;
        } else
        if(c == 'g' || c == 'G'){
          arr[6 + (36 * i)]++;
        } else
        if(c == 'h' || c == 'H'){
          arr[7 + (36 * i)]++;
        } else
        if(c == 'i' || c == 'I'){
          arr[8 + (36 * i)]++;
        } else
        if(c == 'j' || c == 'J'){
          arr[9 + (36 * i)]++;
        } else
        if(c == 'k' || c == 'K'){
          arr[10 + (36 * i)]++;
        } else
        if(c == 'l' || c == 'L'){
          arr[11 + (36 * i)]++;
        } else
        if(c == 'm' || c == 'M'){
          arr[12 + (36 * i)]++;
        } else
        if(c == 'n' || c == 'N'){
          arr[13 + (36 * i)]++;
        } else
        if(c == 'o' || c == 'O'){
          arr[14 + (36 * i)]++;
        } else
        if(c == 'p' || c == 'P'){
          arr[15 + (36 * i)]++;
        } else
        if(c == 'q' || c == 'Q'){
          arr[16 + (36 * i)]++;
        } else
        if(c == 'r' || c == 'R'){
          arr[17 + (36 * i)]++;
        } else
        if(c == 's' || c == 'S'){
          arr[18 + (36 * i)]++;
        } else
        if(c == 't' || c == 'T'){
          arr[19 + (36 * i)]++;
        } else
        if(c == 'u' || c == 'U'){
          arr[20 + (36 * i)]++;
        } else
        if(c == 'v' || c == 'V'){
          arr[21 + (36 * i)]++;
        } else
        if(c == 'w' || c == 'W'){
          arr[22 + (36 * i)]++;
        } else
        if(c == 'x' || c == 'X'){
          arr[23 + (36 * i)]++;
        } else
        if(c == 'y' || c == 'Y'){
          arr[24 + (36 * i)]++;
        } else
        if(c == 'z' || c == 'Z'){
          arr[25 + (36 * i)]++;
        } else
        if(c == '1') {
          arr[26 + (36 * i)]++;
        } else 
        if(c == '2') {
          arr[27 + (36 * i)]++;
        } else 
        if(c == '3') {
          arr[28 + (36 * i)]++;
        } else 
        if(c == '4') {
          arr[29 + (36 * i)]++;
        } else 
        if(c == '5') {
          arr[30 + (36 * i)]++;
        } else 
        if(c == '6') {
          arr[31 + (36 * i)]++;
        } else 
        if(c == '7') {
          arr[32 + (36 * i)]++;
        } else
        if(c == '8') {
          arr[33 + (36 * i)]++;
        } else 
        if(c == '9') {
          arr[34 + (36 * i)]++;
        } else 
        if(c == '0') {
          arr[35 + (36 * i)]++;
        }
      }
    }
    for(i = 0; i < arr.length; i++){
      arr[i] /= (arr.length / keyLength);
    }

    int keyNums[] = new int[keyLength];
    for(i = 0; i < keyLength; i++){
      double max = 0.0;
      for(j = 0; j < 26; j++){
        double dot = 0.0;
        for(k = 0; k < 26; k++){
          dot += (freq[k] * arr[((k + j) % 26) + (26 * i)]);
        }
        if(dot >= max){
          max = dot;
          keyNums[i] = j;
        }
      }
    }

    char ch[] = new char[] {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
    for(i = 0; i <= keyLength; i++){
      if(i >= keyLength){
        System.out.println("");
      } else {
        System.out.print(ch[(keyNums[i])]);
      }
    }

    int currShift = -1;
    String plaintext = "";
    for(char c: str.toCharArray()){
      currShift = (currShift + 1) % keyLength;
      if(c == 'a' || c == 'A'){
        plaintext += ch[((26 + 0 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'b' || c == 'B'){
        plaintext += ch[((26 + 1 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'c' || c == 'C'){
        plaintext += ch[((26 + 2 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'd' || c == 'D'){
        plaintext += ch[((26 + 3 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'e' || c == 'E'){
        plaintext += ch[((26 + 4 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'f' || c == 'F'){
        plaintext += ch[((26 + 5 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'g' || c == 'G'){
        plaintext += ch[((26 + 6 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'h' || c == 'H'){
        plaintext += ch[((26 + 7 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'i' || c == 'I'){
        plaintext += ch[((26 + 8 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'j' || c == 'J'){
        plaintext += ch[((26 + 9 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'k' || c == 'K'){
        plaintext += ch[((26 + 10 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'l' || c == 'L'){
        plaintext += ch[((26 + 11 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'm' || c == 'M'){
        plaintext += ch[((26 + 12 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'n' || c == 'N'){
        plaintext += ch[((26 + 13 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'o' || c == 'O'){
        plaintext += ch[((26 + 14 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'p' || c == 'P'){
        plaintext += ch[((26 + 15 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'q' || c == 'Q'){
        plaintext += ch[((26 + 16 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'r' || c == 'R'){
        plaintext += ch[((26 + 17 - (keyNums[currShift]))) % 26];
      } else
      if(c == 's' || c == 'S'){
        plaintext += ch[((26 + 18 - (keyNums[currShift]))) % 26];
      } else
      if(c == 't' || c == 'T'){
        plaintext += ch[((26 + 19 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'u' || c == 'U'){
        plaintext += ch[((26 + 20 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'v' || c == 'V'){
        plaintext += ch[((26 + 21 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'w' || c == 'W'){
        plaintext += ch[((26 + 22 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'x' || c == 'X'){
        plaintext += ch[((26 + 23 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'y' || c == 'Y'){
        plaintext += ch[((26 + 24 - (keyNums[currShift]))) % 26];
      } else
      if(c == 'z' || c == 'Z'){
        plaintext += ch[((26 + 25 - (keyNums[currShift]))) % 26];
      }
    }
    System.out.println(plaintext);
  }
}